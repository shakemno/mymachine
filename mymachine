#!/usr/bin/env bash
### end 00_basics/00-bash-shebang

echo Install Xcode via App Store and the Xcode command line tools "xcode-select --install"
  # no solution to automate AppStore installs
  read -p "Press any key to continue... " -n1 -s
  echo  '\n'
### end 00_basics/01-header

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end 00_basics/02-exit-trap

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

if [[ ":$PATH:" != *":$HOME/.bin:"* ]]; then
  printf 'export PATH="$HOME/.bin:$PATH"\n' >> ~/.zshrc
  export PATH="$HOME/.bin:$PATH"
fi
### end 00_basics/03-check-home-bin

fancy_echo() {
  printf "\n%b\n" "$1"
}
### end 00_basics/04-shared-functions

fancy_echo "Changing your shell to zsh ..."
  chsh -s $(which zsh)

fancy_echo "Fetching oh-my-zsh ..."
  curl -L http://install.ohmyz.sh | sh

fancy_echo "Fetching and installing dotfiles ..."
  echo "todo..."
  ### end 00_basics/05-zsh-dotfiles

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      brew upgrade "$@"
    fi
  else
    brew install "$@"
  fi
}

brew_is_installed() {
  local NAME=$(brew_expand_alias "$1")

  brew list -1 | grep -Fqx "$NAME"
}

brew_is_upgradable() {
  local NAME=$(brew_expand_alias "$1")

  brew outdated --quiet "$NAME" >/dev/null
  [[ $? -ne 0 ]]
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local NAME=$(brew_expand_alias "$1")
  local DOMAIN="homebrew.mxcl.$NAME"
  local PLIST="$DOMAIN.plist"

  mkdir -p ~/Library/LaunchAgents
  ln -sfv /usr/local/opt/$NAME/$PLIST ~/Library/LaunchAgents

  if launchctl list | grep -q $DOMAIN; then
    launchctl unload ~/Library/LaunchAgents/$PLIST >/dev/null
  fi
  launchctl load ~/Library/LaunchAgents/$PLIST >/dev/null
}


brewcask_install() {
  if brewcask_is_installed "$1"; then
    echo "App is already installed: $1"
  else
    brew cask install --appdir="/Applications" "$@"
  fi
}

brewcask_is_installed() {
  local NAME="$1"
  brew cask list -1 | grep -q "$NAME" || ls /Applications/ | grep -iq "$NAME"
}
### end 00_basics/06-mac-functions

if [[ -f /etc/zshenv ]]; then
  fancy_echo "Fixing OSX zsh environment bug ..."
    sudo mv /etc/{zshenv,zshrc}
fi
### end 00_basics/07-zsh-fix

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby <(curl -fsS https://raw.githubusercontent.com/Homebrew/install/master/install)

  if ! grep -qs "recommended by brew doctor" ~/.zshrc; then
    fancy_echo "Put Homebrew location earlier in PATH ..."
      printf '\n# recommended by brew doctor\n' >> ~/.zshrc
      printf 'export PATH="/usr/local/bin:$PATH"\n' >> ~/.zshrc
      export PATH="/usr/local/bin:$PATH"
  fi
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update
### end 00_basics/08-homebrew

fancy_echo "Installing ImageMagick, to crop and resize images ..."
  brew_install_or_upgrade 'imagemagick'

### end 00_basics/09-packages

if [[ ! -d "$HOME/.rbenv" ]]; then
  fancy_echo "Installing rbenv, to change Ruby versions ..."
    git clone https://github.com/sstephenson/rbenv.git ~/.rbenv

    if ! grep -qs "rbenv init" ~/.zshrc; then
      printf 'export PATH="$HOME/.rbenv/bin:$PATH"\n' >> ~/.zshrc
      printf 'eval "$(rbenv init - zsh --no-rehash)"\n' >> ~/.zshrc
    fi

    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init - zsh)"
fi

if [[ ! -d "$HOME/.rbenv/plugins/rbenv-gem-rehash" ]]; then
  fancy_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..."
    git clone https://github.com/sstephenson/rbenv-gem-rehash.git \
      ~/.rbenv/plugins/rbenv-gem-rehash
fi

if [[ ! -d "$HOME/.rbenv/plugins/ruby-build" ]]; then
  fancy_echo "Installing ruby-build, to install Rubies ..."
    git clone https://github.com/sstephenson/ruby-build.git \
      ~/.rbenv/plugins/ruby-build
fi
### end 00_basics/10-rbenv

fancy_echo "Upgrading and linking OpenSSL ..."
  brew_install_or_upgrade 'openssl'
  brew unlink openssl && brew link openssl --force
### end 00_basics/11-compiler-and-libraries

ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

fancy_echo "Installing Ruby $ruby_version ..."
  rbenv install -s "$ruby_version"

fancy_echo "Setting $ruby_version as global default Ruby ..."
  rbenv global "$ruby_version"
  rbenv rehash

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --no-document --pre
### end 00_basics/12-ruby-environment

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))
### end 00_basics/13-bundler

fancy_echo "Installing CocoaPods ..."
  gem install cocoapods --no-document
### end 00_basics/14-default-gems

fancy_echo "Setting up Alactraz for xcode ..."
  curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh

fancy_echo "Setting default bg etc..."
  curl -o "/Users/$USER/Pictures/user-wallpaper.png" https://github.com/shakemno/mymachine/raw/master/_assets/user-wallpaper.png
  IMAGE="/Users/$USER/Pictures/user-wallpaper.png"
  
  defaults delete com.apple.desktop
  rm "/Users/$USER/Library/Application Support/Dock/desktoppicture.db"

  defaults write com.apple.desktop "{ Background = { default = {ImageFilePath = $IMAGE; NewImageFilePath = $IMAGE; Change = 'Never'; }; }; }"

  killall Dock

fancy_echo "Setting default icon..."
  sudo dscl . -delete "/Users/$USER" JPEGPhoto
  sudo dscl . -delete "/Users/$USER" Picture
  
  curl -o "/Users/$USER/Pictures/user-icon_256x256.png" https://github.com/shakemno/mymachine/raw/master/_assets/user-icon_256x256.png

  sudo dscl . -create "/Users/$USER" Picture "/Users/$USER/Pictures/user-icon_256x256.png"### end 00_basics/15-defaults

fancy_echo "Setting up REMINDER.txt - manually install ..."

  REMINDER="REMINDER.txt"

  > "$REMINDER" 

  echo "Install from Appstore or else:" >> "$REMINDER" 
  echo "---------- \n" >> "$REMINDER"

  echo "1Password" >> "$REMINDER"
  echo "Dash" >> "$REMINDER"
  echo "Mou" >> "$REMINDER"
  echo "Processing" >> "$REMINDER"
  echo "Sketch3" >> "$REMINDER"
  echo "Sparrow/Unibox" >> "$REMINDER"
  echo "Wuala" >> "$REMINDER"
  echo "Wunderlist" >> "$REMINDER"

  echo "MNO apps:" >> "$REMINDER" 
  echo "---------- \n" >> "$REMINDER"

  echo "MuffinPopSaver" >> "$REMINDER"
  echo "clcks" >> "$REMINDER"
  echo "cursored" >> "$REMINDER"

  echo "\n" >> "$REMINDER"

  echo "Now setup SSH keys for github, bitbucket..." >> "$REMINDER"
  echo "---------- \n" >> "$REMINDER"

  echo "ssh-keygen -t rsa -C 'your_email@example.com'" >> "$REMINDER"
  echo "pbcopy < ~/.ssh/id_rsa.pub" >> "$REMINDER"

  open "$REMINDER"

fancy_echo "Install all AppStore Apps at first!"
  # no solution to automate AppStore installs
  read -p "Press any key to continue... " -n1 -s
  echo  '\n'
### end 01_brew_casks/00-reminder-appstore

fancy_echo "Installing default apps from brew casks..."
  brew untap caskroom/cask && brew tap caskroom/cask
  brew cask uninstall && brew cask install
  #brew upgrade brew-cask

  brewcask_install 'alfred'
  brewcask_install 'appcleaner'
  brewcask_install 'cfxr'
  brewcask_install 'dropbox'
  brewcask_install 'firefox'
  brewcask_install 'google-chrome'
  brewcask_install 'gitx'
  brewcask_install 'sublime-text'
  
fancy_echo "Link Cask Apps to Alfred..."
  brew cask alfred link

fancy_echo "Clean up..."
  brew cleanup --force
  brew cask cleanup --force
  rm -f -r /Library/Caches/Homebrew/*### end 01_brew_casks/01-casks

